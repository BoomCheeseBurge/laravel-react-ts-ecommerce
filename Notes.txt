
Modified the APP_URL to be http://laravel-react-ts-ecommerce.test

Executed the command to perform storage link.

Ziggy Route helper is automatically configured and integrated with the fresh Laravel breeze react installation.

Executed 'npm run build' command only.

----------------------------------------------------------------

Installed DaisyUI using NPM.

Replaced Tailwind 'forms' plugin with DaisyUI plugin in the Tailwind config file.
Also, removed TailwindCSS forms using the following command:

    npm uninstall @tailwindcss/forms

Added DaisyUI class attributes for text input, text label, and checkbox input components.

Added DaisyUI class attributes for primary, secondary, and danger button components.

Added DaisyUI class attributes for Link class attributes in login and register page.

______________

Modified the login page to have a link to the register page.

______________

Changed the authenticated layout component's function name from 'Authenticated' to 'AuthenticatedLayout' to ease auto-completion.

______________

The navigation between pages may be slow due to SSR (Server-Side Rendering) approach.

Moreover, the SSR server is NOT running yet, so that is also a factor causing the project to be slow in development.

----------------------------------------------------------------

Moved the default nav element and its content to a scratchpad html file.

______________

Added DaisyUI's navbar style to the newly created NavBar component.

______________

Modified the 'Welcome' page by removing the previous default content.

Added authenticated layout component to the page.

Added DaisyUI's hero section to the 'Welcome' page.

______________

Hide cart and profile dropdowns for un-authenticated user by using Inertia's auth prop.

----------------------------------------------------------------

Installed Spatie Laravel Permission package.

Added the trait related to the package unto the 'User' model.

Created enum files for 'Role' and 'Permission'.

______________

Created seeder files for 'Role' and 'User'.

______________

The established roles and permissions are as follows:

    Users have roles -> roles have permissions -> users inherit permissions from roles

----------------------------------------------------------------

Installed Filament but using the following command:

    composer require filament/filament

The command excludes the specified version to avoid conflicts that arises when including it.

The command following afterwards is as follows:

    php artisan filament:install --panels

Just press enter on the ID.

Filament user creation user is skipped because the seeder already generates the necessary users.

______________

Added permission and role aliases in the 'app.php' bootstrap file.
Due to this registered aliases, the Filament's default admin login page is no longer accessible as it will forcibly access the admin panel instead of the login page.
Instead, a redirect will be made to the app's login page.

Added Spatie's role middleware to the 'AdminPanelProvider.php' file as well as 'auth' middleware, so that the admin panel can only be accessed by authenticated users.

______________

Modified the 'store' method of the 'AuthenticatedSessionController.php' file to redirect admin and vendor users to their admin panel, while common users to the welcome page. 

______________

If the user login went bogus, that just means the app is still trying to force a redirect to admin panel.

Just hard reload the webpage and the user login should be successful.

______________

Filament's authentication middleware is commented out to use the project's authentication.

----------------------------------------------------------------

Created model and migration for 'Department'.

______________

Unguard all the models associated with Filament's admin panel through the 'AdminPanelProvider.php' file.

This is a safe and common practice since Filament saves model data safely.

______________

Generated Filament resource for 'Department'.

Added Filament inputs to the form.

'onBlur' will only send network requests with property updates when a user clicks away from an input, or presses the tab key to move to the next input.

Added Filament columns to the table.

Redirect user to the table page after resource creation and edit.
The redirect is added in the 'CreateDepartment.php' and 'EditDepartment.php' files for department creation and edit.

______________

Prevent vendor users from seeing the department section through the 'canViewAny' function in the 'DepartmentResource.php' file.

______________

Created model and migration for 'Category'.

Created Filament resource for 'Category'.

______________

Added relation manager for 'Category' in the department resource.

The following command is used:

    php artisan make:filament-relation-manager DepartmentResource categories name

______________

Added hasMany relations to the Department model.

And, registered the relation in `DepartmentResource::getRelations()` method.
______________

Added 'parent' belongs to relation in the 'Category' model.

______________

Created seeder for 'Department' and 'Category' models.

----------------------------------------------------------------

Created model, migration, and controller for 'Product'.

Created enum file for 'ProductStatusEnum'.

Created Filament resource for 'Product'.

______________

Added belongs to relationship of 'Department' and 'Category' to the 'Product' model.

Added inputs to the form of Product resource.

Override the 'mutateFormDataBeforeCreate' to provide value beforehand for 'created_by' and 'updated_by' fields.

Prevent admin users from viewing or accessing the 'Product' page.

Added columns to the table of Product resource.

Added redirect URL to index page after creation or edit of Product resource.

----------------------------------------------------------------

Installed Filament's Spatie media library with the following command:

    composer require filament/spatie-laravel-media-library-plugin

    php artisan vendor:publish --provider="Spatie\MediaLibrary\MediaLibraryServiceProvider" --tag="medialibrary-migrations"

______________

Added sub-navigation for the Product resource, so that later after product images section has been established, users can switch between the two sections (edit and images).

Copied and modified the 'EditProduct.php' file for the Product images.

Modified the 'Product' model to be able to work with Spatie media library.

______________

Registered media conversions from Spatie media library to the Product model.

______________

Override the hero icon for the product images and product resource navigation using Blade UI kit hero icon.

______________

As of 10/02/2025, the image conversion using Spatie media library does NOT work.
The error came from the Laravel queue listener/worker not being able to perform the conversion.

----------------------------------------------------------------

Created model for 'VariationType' and 'VariationTypeOption'.

Created model and migration for 'ProductVariation'.

______________

The migration tables defined in the product variations table can be visualized as follows:

o Size [variation type]
    |
    |----> Small [variation type option]
    |
    |----> Medium [variation type option]
    |
    |----> Large [variation type option]

o Color [variation type]
    |
    |----> Red [variation type option]
    |
    |----> Green [variation type option]
    |
    |----> Blue [variation type option]

Both variation types creates various combinations of size and color options.

e.g.,

    Small - Red
    Small - Green
    Small - Blue
    Medium - Red
    Medium - Green
    Medium - Blue
    Large - Red
    Large - Green
    Large - Blue

Then, there are also the quantity and price associated with each of those combinations.

==================================================
    Combination        |    Quantity    | Price |
==================================================
    Small - Red        |        10      |   10  |
    Small - Green      |        1       |   99  |
    Small - Blue       |        15      |   85  |
    Medium - Red       |        30      |   13  |
    Medium - Green     |        24      |   10  |
    Medium - Blue      |        12      |   20  |
    Large - Red        |        4       |   10  |
    Large - Green      |        100     |   31  |
    Large - Blue       |        67      |   10  |


Say that the first three variation type options have the following IDs:

================================
    ID  |   VariationTypeOption
================================
    1   |    Small
    2   |    Medium
    3   |    Large
    4   |    Red
    5   |    Green
    6   |    Blue

Then, in the 'product variations' table, the table should something as follows:

=============================================================================
    ID  |   Product ID  |   Quantity    | Price |   [Variation type options]
=============================================================================
    1   |       1       |       10      |   15  |           [1, 4]          |
    2   |       1       |       12      |   15  |           [1, 5]          |

Where '1' refers to 'Small' variation type option, and '4' refers to 'Red' variation type option.
The product ID shows that they belong to the same product from the same vendor.

______________

Quantity can be set null which informs that the quantity of the said product is infinite.

Price is also nullable which if not specified, the price will be taken from the default price of the product.

______________

Created enum file for product variation types.

______________

Dynamic variation type options are implemented using Filament's repeater feature.

Added 'hasMany' relation to the variation type model from the product model. 

Timestamps for 'VariationType' and 'VariationTypeOption' model has been disabled.

______________

Override the title for 'product variation types' and 'product variation type options' page.

----------------------------------------------------------------

Reduced the sidebar width in 'AdminPanelProvider.php' file.

Copied 'ProductVariationTypes.php' file to be 'ProductVariations.php' file.

______________

The combination of variation type options is known as Cartesian Product.

______________

Added 'hasMany' relation from Product to ProductVariation.

______________

In the 'ProductVariations.php' file, there is cartesian merge (user-defined) method in which its purpose can be depicted as follows:

================================
   [Variation type options]    |
================================
        Small - Red            |
        Small - Green          |
        Small - Blue           |
        Medium - Red           |
        Medium - Red           |
        Medium - Red           |
        Large - Red            |
        Large - Green          |
        Large - Blue           |

Say that the small, medium, large were previously created and have their own quantity and price.

The vendor decides to add another size variant, 'XL'.

In that case, the variations query to array will generate the following:

================================
   [Variation type options]    |
================================
        Small - Red            |
        Small - Green          |
        Small - Blue           |
        Medium - Red           |
        Medium - Red           |
        Medium - Red           |
        Large - Red            |
        Large - Green          |
        Large - Blue           |
        XL - Red               |
        XL - Green             |
        XL - Blue              |

It is known that there are associated quantity and price for small, medium, and large, except XL.

The merge cartesian method will provide default quantity and price for XL.

=========================================================
   [Variation type options]    |   Quantity    | Price |
=========================================================
        Small - Red            |       10      |   15  |
        Small - Green          |       10      |   15  |
        Small - Blue           |       10      |   15  |
        Medium - Red           |       10      |   15  |
        Medium - Red           |       10      |   15  |
        Medium - Red           |       10      |   15  |
        Large - Red            |       10      |   15  |
        Large - Green          |       10      |   15  |
        Large - Blue           |       10      |   15  |
        XL - Red               |       10      |   15  |
        XL - Green             |       10      |   15  |
        XL - Blue              |       10      |   15  |

______________

The cartesian product method will generate the following data:

==============================================================================
   [Variation type options]    |    Default Quantity    |   Default Price   |
==============================================================================
        [Small, Red]            |    product-default     |  product-default  |
        [Small, Green]          |    product-default     |  product-default  |
        [Small, Blue]           |    product-default     |  product-default  |
        [Medium, Red]           |    product-default     |  product-default  |
        [Medium, Red]           |    product-default     |  product-default  |
        [Medium, Red]           |    product-default     |  product-default  |
        [Large, Red]            |    product-default     |  product-default  |
        [Large, Green]          |    product-default     |  product-default  |
        [Large, Blue]           |    product-default     |  product-default  |
        [XL, Red]               |    product-default     |  product-default  |
        [XL, Green]             |    product-default     |  product-default  |
        [XL, Blue]              |    product-default     |  product-default  |

The generated JSON data from cartesianProduct() looks somewhat as follows:

[
    {
        "variation_type_1": {
            "id": 1,
            "name": "Black",
            "type": "Color",
        },
        "variation_type_2": {
            "id": 4,
            "name": "Small",
            "type": "size",
        },
        "quantity": 10,
        "price": 15
    },
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
]

Previously, the cartesianProduct output uses the product's default value of quantity and price.
However, some combinations already have their own defined values for quantity and price.
This is where the mergeResult() function appends those existing values.

______________

Set data before form fill, before save, and record update for product variations section.

Added cast field for 'variation_type_option_ids' attribute on ProductVariation model to 'json' datatype.

______________

Added product variations section to modify quantity and price of each product variations combination.

----------------------------------------------------------------

Added a local query scope to only get products associated with the current authenticated vendor user in Product model.
Used this query scope in Product resource on its Eloquent query.
In the product section, only products associated with the current authenticated vendor user can seen.

Added a local scope for front-end side for selecting only published products.

______________

Created Laravel API resource for product listing to be rendered on the React component.

Changed 'Welcome.tsx' to 'Home.tsx'.

Created 'ProductItem' component.

Defined new datatype for product in the 'index.d.tsx' file.

Defined new datatype for pagination props in the 'index.d.tsx' file.
In the 'Home.tsx' file, 'products' will be an instance of PaginationProps which will be an array of data with type product.

______________

Defined the home() method in the Product controller.

Defined a belongs to relation for the Product model to the User model.

______________

Created a new core component for currency formatter that uses ES6 internationalization object, 'Intl'.

Used this component in the product item component for formatting the product price.

----------------------------------------------------------------

Defined the show() method in the Product controller.

Created Laravel API resource for Product.

Created 'Show.tsx' page for product.

______________

Created 'Carousal.tsx' core component.

Added carousel from DaisyUI.

Added new datatype for image in the 'index.d.tsx' file.

Added 'variationTypes' and 'variations' attributes for the Product type in the 'index.d.tsx' file.

Added new datatype for 'variationTypes' and 'variations' in the 'index.d.tsx' file.

Product datatype will be for product list item and product details.

______________

Created 'Carousel' core component display images on the product details page.

______________

'dangerouslySetInnerHTML' is used to properly display lists avoiding to show the raw character symbols.

______________

Created a 'helpers.ts' file in the 'resources/js' folder.

______________

Tailwind resets the styles for the product description as an output of the WYSIWYG editor.

Added CSS styling in the 'app.css' file.

These added CSS styles revert the content of the WYSIWYG editor output back to its correct format.

Notice that the price value of the selected option has not been saved to the form field.
This price update on the form will likely be done at the 'useEffect' hook for updating the selected option IDs.  

______________

Added 'ComputedProduct' and 'FormData' types in the 'index.d.tsx' file.

Created 'ProductVariationTypes.tsx' and 'AddToCartButton.tsx' components instead of placing the render code directly inside the 'Show.tsx' page.

----------------------------------------------------------------