
Modified the APP_URL to be http://laravel-react-ts-ecommerce.test

Executed the command to perform storage link.

Ziggy Route helper is automatically configured and integrated with the fresh Laravel breeze react installation.

Executed 'npm run build' command only.

----------------------------------------------------------------

Installed DaisyUI using NPM.

Replaced Tailwind 'forms' plugin with DaisyUI plugin in the Tailwind config file.
Also, removed TailwindCSS forms using the following command:

    npm uninstall @tailwindcss/forms

Added DaisyUI class attributes for text input, text label, and checkbox input components.

Added DaisyUI class attributes for primary, secondary, and danger button components.

Added DaisyUI class attributes for Link class attributes in login and register page.

______________

Modified the login page to have a link to the register page.

______________

Changed the authenticated layout component's function name from 'Authenticated' to 'AuthenticatedLayout' to ease auto-completion.

______________

The navigation between pages may be slow due to SSR (Server-Side Rendering) approach.

Moreover, the SSR server is NOT running yet, so that is also a factor causing the project to be slow in development.

----------------------------------------------------------------

Moved the default nav element and its content to a scratchpad html file.

______________

Added DaisyUI's navbar style to the newly created NavBar component.

______________

Modified the 'Welcome' page by removing the previous default content.

Added authenticated layout component to the page.

Added DaisyUI's hero section to the 'Welcome' page.

______________

Hide cart and profile dropdowns for un-authenticated user by using Inertia's auth prop.

----------------------------------------------------------------

Installed Spatie Laravel Permission package.

Added the trait related to the package unto the 'User' model.

Created enum files for 'Role' and 'Permission'.

______________

Created seeder files for 'Role' and 'User'.

______________

The established roles and permissions are as follows:

    Users have roles -> roles have permissions -> users inherit permissions from roles

----------------------------------------------------------------

Installed Filament but using the following command:

    composer require filament/filament

The command excludes the specified version to avoid conflicts that arises when including it.

The command following afterwards is as follows:

    php artisan filament:install --panels

Just press enter on the ID.

Filament user creation user is skipped because the seeder already generates the necessary users.

______________

Added 'role' middleware to the AdminPanelProvider class to use Spatie permission control to manage who can have access to Filament's admin panel.

Added 'auth' middleware which belongs to Laravel so that unauthorized users will be redirect to the Laravel login page. 

______________

Added permission and role aliases in the 'app.php' bootstrap file.
Due to this registered aliases, the Filament's default admin login page is no longer accessible as it will forcibly access the admin panel instead of the login page.
Instead, a redirect will be made to the app's login page.

Added Spatie's role middleware to the 'AdminPanelProvider.php' file as well as 'auth' middleware, so that the admin panel can only be accessed by authenticated users.

______________

Modified the 'store' method of the 'AuthenticatedSessionController.php' file to redirect admin and vendor users to their admin panel, while common users to the welcome page. 

______________

If the user login went bogus, that just means the app is still trying to force a redirect to admin panel.

Just hard reload the webpage and the user login should be successful.

______________

Filament's authentication middleware is commented out to use the Laravel's auth page instead of Filament's auth page.

----------------------------------------------------------------

Created model and migration for 'Department'.

______________

Unguard all the models associated with Filament's admin panel through the 'AdminPanelProvider.php' file.

This is a safe and common practice since Filament saves model data safely.

______________

Generated Filament resource for 'Department'.

Added Filament inputs to the form.

'onBlur' will only send network requests with property updates when a user clicks away from an input, or presses the tab key to move to the next input.

Added Filament columns to the table.

Redirect user to the table page after resource creation and edit.
The redirect is added in the 'CreateDepartment.php' and 'EditDepartment.php' files for department creation and edit.

______________

Prevent vendor users from seeing the department section through the 'canViewAny' function in the 'DepartmentResource.php' file.

______________

Created model and migration for 'Category'.

Created Filament resource for 'Category'.

______________

Added relation manager for 'Category' in the department resource.

The following command is used:

    php artisan make:filament-relation-manager DepartmentResource categories name

______________

Added hasMany relations to the Department model.

And, registered the relation in `DepartmentResource::getRelations()` method.
______________

Added 'parent' belongs to relation in the 'Category' model.

______________

Created seeder for 'Department' and 'Category' models.

----------------------------------------------------------------

Created model, migration, and controller for 'Product'.

Created enum file for 'ProductStatusEnum'.

Created Filament resource for 'Product'.

______________

Added belongs to relationship of 'Department' and 'Category' to the 'Product' model.

Added inputs to the form of Product resource.

Override the 'mutateFormDataBeforeCreate' to provide value beforehand for 'created_by' and 'updated_by' fields.

Prevent admin users from viewing or accessing the 'Product' page.

Added columns to the table of Product resource.

Added redirect URL to index page after creation or edit of Product resource.

----------------------------------------------------------------

Installed Filament's Spatie media library with the following command:

    composer require filament/spatie-laravel-media-library-plugin

    php artisan vendor:publish --provider="Spatie\MediaLibrary\MediaLibraryServiceProvider" --tag="medialibrary-migrations"

______________

Added sub-navigation for the Product resource, so that later after product images section has been established, users can switch between the two sections (edit and images).

Copied and modified the 'EditProduct.php' file for the Product images.

Modified the 'Product' model to be able to work with Spatie media library.

______________

Registered media conversions from Spatie media library to the Product model.

______________

Override the hero icon for the product images and product resource navigation using Blade UI kit hero icon.

______________

As of 10/02/2025, the image conversion using Spatie media library does NOT work.
The error came from the Laravel queue listener/worker not being able to perform the conversion.

----------------------------------------------------------------

Created model for 'VariationType' and 'VariationTypeOption'.

Created model and migration for 'ProductVariation'.

______________

The migration tables defined in the product variations table can be visualized as follows:

o Size [variation type]
    |
    |----> Small [variation type option]
    |
    |----> Medium [variation type option]
    |
    |----> Large [variation type option]

o Color [variation type]
    |
    |----> Red [variation type option]
    |
    |----> Green [variation type option]
    |
    |----> Blue [variation type option]

Both variation types creates various combinations of size and color options.

e.g.,

    Small - Red
    Small - Green
    Small - Blue
    Medium - Red
    Medium - Green
    Medium - Blue
    Large - Red
    Large - Green
    Large - Blue

Then, there are also the quantity and price associated with each of those combinations.

==================================================
    Combination        |    Quantity    | Price |
==================================================
    Small - Red        |        10      |   10  |
    Small - Green      |        1       |   99  |
    Small - Blue       |        15      |   85  |
    Medium - Red       |        30      |   13  |
    Medium - Green     |        24      |   10  |
    Medium - Blue      |        12      |   20  |
    Large - Red        |        4       |   10  |
    Large - Green      |        100     |   31  |
    Large - Blue       |        67      |   10  |


Say that the first three variation type options have the following IDs:

================================
    ID  |   VariationTypeOption
================================
    1   |    Small
    2   |    Medium
    3   |    Large
    4   |    Red
    5   |    Green
    6   |    Blue

Then, in the 'product variations' table, the table should something as follows:

=============================================================================
    ID  |   Product ID  |   Quantity    | Price |   [Variation type options]
=============================================================================
    1   |       1       |       10      |   15  |           [1, 4]          |
    2   |       1       |       12      |   15  |           [1, 5]          |

Where '1' refers to 'Small' variation type option, and '4' refers to 'Red' variation type option.
The product ID shows that they belong to the same product from the same vendor.

______________

Quantity can be set null which informs that the quantity of the said product is infinite.

Price is also nullable which if not specified, the price will be taken from the default price of the product.

______________

Created enum file for product variation types.

______________

Dynamic variation type options are implemented using Filament's repeater feature.

Added 'hasMany' relation to the variation type model from the product model. 

Timestamps for 'VariationType' and 'VariationTypeOption' model has been disabled.

______________

Override the title for 'product variation types' and 'product variation type options' page.

----------------------------------------------------------------

Reduced the sidebar width in 'AdminPanelProvider.php' file.

Copied 'ProductVariationTypes.php' file to be 'ProductVariations.php' file.

______________

The combination of variation type options is known as Cartesian Product.

______________

Added 'hasMany' relation from Product to ProductVariation.

______________

In the 'ProductVariations.php' file, there is cartesian merge (user-defined) method in which its purpose can be depicted as follows:

================================
   [Variation type options]    |
================================
        Small - Red            |
        Small - Green          |
        Small - Blue           |
        Medium - Red           |
        Medium - Red           |
        Medium - Red           |
        Large - Red            |
        Large - Green          |
        Large - Blue           |

Say that the small, medium, large were previously created and have their own quantity and price.

The vendor decides to add another size variant, 'XL'.

In that case, the variations query to array will generate the following:

================================
   [Variation type options]    |
================================
        Small - Red            |
        Small - Green          |
        Small - Blue           |
        Medium - Red           |
        Medium - Red           |
        Medium - Red           |
        Large - Red            |
        Large - Green          |
        Large - Blue           |
        XL - Red               |
        XL - Green             |
        XL - Blue              |

It is known that there are associated quantity and price for small, medium, and large, except XL.

The merge cartesian method will provide default quantity and price for XL.

=========================================================
   [Variation type options]    |   Quantity    | Price |
=========================================================
        Small - Red            |       10      |   15  |
        Small - Green          |       10      |   15  |
        Small - Blue           |       10      |   15  |
        Medium - Red           |       10      |   15  |
        Medium - Red           |       10      |   15  |
        Medium - Red           |       10      |   15  |
        Large - Red            |       10      |   15  |
        Large - Green          |       10      |   15  |
        Large - Blue           |       10      |   15  |
        XL - Red               |       10      |   15  |
        XL - Green             |       10      |   15  |
        XL - Blue              |       10      |   15  |

______________

The cartesian product method will generate the following data:

==============================================================================
   [Variation type options]    |    Default Quantity    |   Default Price   |
==============================================================================
        [Small, Red]            |    product-default     |  product-default  |
        [Small, Green]          |    product-default     |  product-default  |
        [Small, Blue]           |    product-default     |  product-default  |
        [Medium, Red]           |    product-default     |  product-default  |
        [Medium, Red]           |    product-default     |  product-default  |
        [Medium, Red]           |    product-default     |  product-default  |
        [Large, Red]            |    product-default     |  product-default  |
        [Large, Green]          |    product-default     |  product-default  |
        [Large, Blue]           |    product-default     |  product-default  |
        [XL, Red]               |    product-default     |  product-default  |
        [XL, Green]             |    product-default     |  product-default  |
        [XL, Blue]              |    product-default     |  product-default  |

The generated JSON data from cartesianProduct() looks somewhat as follows:

[
    {
        "variation_type_1": {
            "id": 1,
            "name": "Black",
            "type": "Color",
        },
        "variation_type_2": {
            "id": 4,
            "name": "Small",
            "type": "size",
        },
        "quantity": 10,
        "price": 15
    },
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
]

Previously, the cartesianProduct output uses the product's default value of quantity and price.
However, some combinations already have their own defined values for quantity and price.
This is where the mergeResult() function appends those existing values.

______________

Set data before form fill, before save, and record update for product variations section.

Added cast field for 'variation_type_option_ids' attribute on ProductVariation model to 'json' datatype.

______________

Added product variations section to modify quantity and price of each product variations combination.

----------------------------------------------------------------

Added a local query scope to only get products associated with the current authenticated vendor user in Product model.
Used this query scope in Product resource on its Eloquent query.
In the product section, only products associated with the current authenticated vendor user can seen.

Added a local scope for front-end side for selecting only published products.

______________

Created Laravel API resource for product listing to be rendered on the React component.

Changed 'Welcome.tsx' to 'Home.tsx'.

Created 'ProductItem' component.

Defined new datatype for product in the 'index.d.tsx' file.

Defined new datatype for pagination props in the 'index.d.tsx' file.
In the 'Home.tsx' file, 'products' will be an instance of PaginationProps which will be an array of data with type product.

______________

Defined the home() method in the Product controller.

Defined a belongs to relation for the Product model to the User model.

______________

Created a new core component for currency formatter that uses ES6 internationalization object, 'Intl'.

Used this component in the product item component for formatting the product price.

----------------------------------------------------------------

Defined the show() method in the Product controller.

Created Laravel API resource for Product.

Created 'Show.tsx' page for product.

______________

Created 'Carousal.tsx' core component.

Added carousel from DaisyUI.

Added new datatype for image in the 'index.d.tsx' file.

Added 'variationTypes' and 'variations' attributes for the Product type in the 'index.d.tsx' file.

Added new datatype for 'variationTypes' and 'variations' in the 'index.d.tsx' file.

Product datatype will be for product list item and product details.

______________

Created 'Carousel' core component display images on the product details page.

______________

'dangerouslySetInnerHTML' is used to properly display lists avoiding to show the raw character symbols.

______________

Created a 'helpers.ts' file in the 'resources/js' folder.

______________

Tailwind resets the styles for the product description as an output of the WYSIWYG editor.

Added CSS styling in the 'app.css' file.

These added CSS styles revert the content of the WYSIWYG editor output back to its correct format.

Notice that the price value of the selected option has not been saved to the form field.
This price update on the form will likely be done at the 'useEffect' hook for updating the selected option IDs.  

______________

Added 'ComputedProduct' and 'FormData' types in the 'index.d.tsx' file.

Created 'ProductVariationTypes.tsx' and 'AddToCartButton.tsx' components instead of placing the render code directly inside the 'Show.tsx' page.

----------------------------------------------------------------

Created model and migration files for 'CartItem'.

Created resource controller for 'CartController'.

Added a singleton service binding for the 'CartService' class in the AppServiceProvider file.

Created a provider for 'CartService'.

Added the a controller group for 'CartController'.

______________

Created model and migration files for 'Vendor'.

Set a one-to-one relationship on the 'User' model to 'Vendor' model.

______________

Created a local scope, 'forWebsite', in the 'Product' model.

______________

Added a belongs to relationship on the 'VariationTypeOption' model to 'VariationType' model.

______________

Added shared data for total quantity, total price, and cart items in the 'HandleInertiaRequests' file.

______________

Created an ENUM file for vendor status.

______________

Modified the user seeder so that the created user has its corresponding vendor record created.

______________

Added data that can be shard by the 'PageProps' in the 'index.d.ts' file such as total quantity, total price, and cart items.

Added new datatype for cart item in the 'index.d.tsx' file.

______________

Created an application component for cart item dropdown.

______________

Added csrf token as a shared data to the 'HandleInertiaRequests' file.

______________

Added new datatype for grouped cart items in the 'index.d.tsx' file.

______________

Installed Hero Icons using NPM for React with the following command:

    npm install @heroicons/react

______________

Added middleware group for 'verified'.

Added route to cart checkout from CartController.

______________

Changed the property name in PageProps and HandleInertiaRequests from 'CartItems' to 'DropdownCartItems' to avoid conflict with the 'CartItems' variable name used in the Page.

______________

Added a helper function for generating show product route based on cart item that has variation type option in the 'helpers.ts' file.

______________

Added a function for moving cart items from cookies to the database.

Used the function in the 'AuthenticatedSessionController' file to check whether there is cart items stored in cookies when a user is authenticated.

______________

Added a type cast for 'variation_type_option_ids' column to be an array in the 'CartItem' model.

______________

Replaced 'dashboard' with 'home' in the routes.

----------------------------------------------------------------

***** Setup Stripe Account *****

1. Created a new Stripe account.

2. Create another store Stripe account (from the dashboard) for testing purposes named "Laravel Ecommerce Tutorial".

3. Ensure that this newly created Stripe account is in 'test mode'.

4. Copied and pasted the API key from 'home' page under 'For Developers' section to the ENV file named 'STRIPE_SECRET'.

______________

***** Installing Stripe PHP Package *****

- Search and go to 'event destinations' in the search bar of the Stripe page.
- Click on the 'Test with a local listener' button.
- Follow the step by step displayed instructions:
    
    o Download the Stripe CLI for the used OS (for Windows download the stripe_1.24.0_windows_x86_64.zip )
    o Extract the zip file to the desired location (ex: C:\Stripe)
    o Add the directory path to the folder where the stripe.exe is located to your computer's System Variables path.
    o Open CMD and run this command: stripe login
    o Press 'Enter' which will open the Stripe page for authorizing access to the webhook.

- Before listening to the webhook, install the Strip API PHP package from this link: https://github.com/stripe/stripe-php
- Continuation after the changes below.

______________

Created model and migration files for 'Order'.

Created a model file for 'OrderItem' (the migration table is defined in the 'Order' migration file).

Created enum file for 'OrderStatusEnum'.

______________

Added 'currency' and 'stripe_secret_key' properties in the 'app.php' config file.

Added 'APP_CURRENCY' to ENV variables.

______________

Defined the checkout method in the Cart controller.

______________

Created a controller for Stripe.

Added routes for Stripe 'success', 'failure' and 'webhook' routes.

Added config in app bootstrap file to make a CSRF token validation exception for Stripe routes (due to the Stripe webhook).

______________

***** Using the Stripe webhook *****

- Run the command:

    stripe listen --forward-to [local_domain_name]/stripe/webhook

    Ex of [local_domain_name]: laravel-react-ts-ecommerce.test/stripe/webhook

- Copy the webhook key and paste to the ENV variable called 'STRIPE_WEBHOOK_KEY'.

______________

Added shared data for error in the 'HandleInertiaRequests' file.

Added data type for 'success' and 'error' for PageProps in the 'index.d.ts' file.

Used the 'error' prop in the authenticated layout component.

______________

Added fillable fields for 'OrderItem' and 'Order' models.

Added a belongsTo relation from 'OrderItem' to 'Order'.

Disabled timestamps for 'OrderItem' model.

Added several relations for the 'Order' model.

Added a type cast for 'variation_type_option_ids' column to be an array in the 'OrderItem' model.

______________

Created a new Page for Stripe success page.

Added 'stripe_webhook_key' property in the 'app.php' config file.

Added 'platform_fee_pct' property in the 'app.php' config file (and assumed to be 10%).

______________

'Website commission' will be 10% of the leftover after deducting Strip fee on the total amount/price.

______________

Fake Card Information (that can be used):

o Card Information

    - 4000 0000 0000 0077 (Fake Credit Card Number)
    - 12 / 34 (MM / YY)
    - 455 (CVC)

o Cardholder name

    - User

o Country or region

    - Georgia (for example)

Ignore 'Cash App Pay' option.

Click on 'Pay' button to process the fake payment.

Note: Going to the Stripe checkout payment page should display some activities in the webhook listener output as well as when the payment is completed successfully (check Laravel log file).

______________

Created a new Laravel resource for viewing orders after success Stripe payment named 'OrderViewResource'.

Created a new Laravel resource for vendor user named 'VendorUserResource'.

Added a helper function to retrieve product or variation option image from Spatie Media Library in the 'Product' model.

Defined new datatype for order item and main order in the 'index.d.tsx' file.

______________

Disabled checkout button when there are no items in the cart.

Defined new datatype for for determining whether a user is admin or vendor for the PageProps in the 'index.d.tsx' file.

Added a navigation to the admin dashboard for Admin and Vendor users on the navbar.

______________

Override the default logo for Filament admin panel.

The custom logo file is created in the path 'resources/views/vendor/filament-panels/components/logo.blade.php'.

The existence of this file will overwrite the the same file name in the vendor folder.

______________

Order details page and vendor store page will implemented later.

----------------------------------------------------------------

Modified the 'success' session data in the 'HandleInertiaRequests' file as well as its type in the 'index.d.ts. file.

Setup success message in the 'AuthenticatedLayout' component.

NOTE:

    If you don't plan on having any interactive features that require canceling individual timeouts (like a close button) 
    or any feature that requires clearing all timeouts, and you're solely relying on the useEffect cleanup for unmounting/re-rendering cleanup 
    and the setTimeout callback for cleanup after 5 seconds, then you don't strictly need timeoutRefs in your current code.

    useEffect Cleanup: The useEffect cleanup function already handles canceling the timeout when the component unmounts or pageProps.success changes.

Observation:

    There is a weird occurrence where after the success message pops up and then hides again, try saving the success message component file.
    The success message with the same message will show up again and then hides.
    A possible reasoning is due to React's Strict mode.

______________

Setup Mailpit SMTP testing tool (setup video in Laravel\Misc\Mailpit learning folder).

Modified ENV variables for Mailpit.

Added 'MustVerifyEmail' interface to the 'User' model.

Added 'ShouldQueue' interface and 'Queuable' trait to the 'User' model for sending the email.

______________

Created Laravel markdown mailable classes for 'NewOrder' and 'CheckoutCompleted'.

Published the Laravel mail assets.

Commented out some CSS properties in the 'default.css' file.

Also, added CSS properties in the 'default.css' file.

Modified the slot for the mail header component.

______________

Added larastore logo in the public folder.

Override the DaisyUI theme color in the Tailwind config file.

______________

Send mail to vendor and user in the Stripe controller.

----------------------------------------------------------------

Created a controller for vendor.

______________

Changed the primary key of 'Vendor' model to 'user_id' field.

Added local scope for vendor payout eligibility on the 'Vendor' model.

Create a relation with the user model from the vendor model.

Created a 'VendorDetails.tsx' page in the 'Pages/Profile/Partials' directory.

______________

Installed composer package to connect Laravel to Stripe.

Link: https://packagist.org/packages/simonhamp/laravel-stripe-connect

The STRIPE_KEY can be taken from the Stripe dashboard on the publishable key.

Changed name 'STRIPE_SECRET_KEY' to 'STRIPE_SECRET' to match the instructed ENV name for the package.

Added the 'connect' method to the Stripe controller.

Added route for the vendor user to connect to Stripe.

Modified the exception for CSRF token validate to be specifically for 'stripe/webhook' in the 'app.php' bootstrap file.

______________

Created a new Laravel resource called 'AuthUserResource'.

Added labels to the vendor status enum.

Modified the shared data in inertia request by returning the auth user resource instead of the user from Laravel request. 

______________

Added new data type for vendor property on User type in the 'index.d.ts' file.

______________

Modified the 'Edit' page of profile to include the 'VendorDetails' component.

______________

Set up the connect process to connect to Stripe by the vendor users.

Steps to be taken:

    1. Go to the Stripe dashboard page.
    2. Click on the 'More' section and click to the 'Connect' option which can be found on the left side-bar.
    3. Follow the steps inside by clicking on the preferred options.
    4. The preferred options selected for this project were the following:
        - Buyers will purchase from your (How will funds flow on your platform?)
        - Continue through the acknowledgements of liability for refunds and chargebacks.  
        - Payouts will be split between sellers (How will sellers be paid out?)
        - E-commerce products (Select the industry that best matches your business.)
        - Yes, they're similar (Are the products and services offered by your sellers similar?)
        - Not sure (How much do your sellers charge for their most expensive product?)
        - Onboarding hosted by Stripe (Where will sellers create their accounts?)
        - Express Dashboard (Where will sellers manage their account?)
        - Review the selected options and click on 'Continue'.
        - Connection has been established and turn on 'Test mode'.
    5. Check that there is the 'Connect' dropdown with the 'Connected accounts' section with currently no accounts.

Now, vendor users can create their Stripe account on the platform through the web app.

Have a vendor user click on the 'Connect to Stripe' button.

The following options are selected for testing purposes:

    - Click on the 'Use test phone number' button.
    - Click on the 'Use test code' button.
    - Leave country option as it is as well as 'type of business' as individual.
    - Fill in fake name and web address.
    - Choose 'Test Institution' for 'Select an account for payouts'v -> Agree and continue -> Connect accounts -> Not now (on 'save with link')
    - Leave the option as it is (for which account the received earnings will be sent to)
    - Click on 'agree and submit' button (and will be redirected to our web app)

Look in the profile page again to see that this vendor user has connected to their Stripe account.

With this setup, if a vendor user has not yet connected to their Stripe account, they can publish their products but not receive payouts from them.
There is a 'Restricted' status for a vendor user in this state to indicate that they have not finished their onboarding procedure of the Stripe account.

----------------------------------------------------------------

Created model and migration files for 'Payout'.

Created a Laravel command called 'PayoutVendors'.

______________

Adjusted the local scope for vendor eligible payout in the 'Vendor' model to include active Stripe account condition.

______________

Automate the monthly payout process command in the 'AppServiceProvider' file.

For production, add this schedule to the cron entries of the server.

----------------------------------------------------------------

Added helper method in the 'Product' model to retrieve the first image of a product if it has variations.
Used the helper method in the 'ProductListingResource' to fetch the image for the 'image' property.

Added a 'hasManyThrough' relation for related variation options of a 'Product' model.

Added helper method in the 'Product' model to retrieve the price of the first returned product's variation option.
Used the helper method in the 'ProductListingResource' to fetch the price for the 'price' property.

Added a helper method in the 'Product' model to retrieve images of a variation option.

______________

Fixed the if condition of the 'addItemToCart' method in the 'CartService' file to consider empty arrays as well instead of just null values.

----------------------------------------------------------------

Updated the code for the 'profile' method in the vendor controller.

Added a local scope in the 'Product' model for including only approved vendors.

Created a React page for vendor profile in 'Vendor/Profile.tsx'.

Defined new datatype for vendor in the 'index.d.tsx' file.

Added new route to view vendor profile page.

Assign the appropriate route link for viewing the vendor profile page in the 'ProductItem.tsx' file.

Added 'store_name' property to the 'user' property in the product listing resource and product resource.

Added a property type to the Product type for store name in the 'index.d.ts' file.

______________

Generated random images for store image using 'Lorem Picsum' from this link:

    https://picsum.photos/

----------------------------------------------------------------

Added department query in the 'HandleInertiaRequests' file.

Added a local scope to only include published departments in the 'Department' model.

Created a Laravel resource for department.

Added datatype for department and category in the 'index.d.ts' file.

______________

Created an index page for the Department.

Modified the navbar page component to include a sub-navbar for displaying product departments.

______________

Added property on page props for app name in the 'HandleInertiaRequests' file.

Added the app name type property in the 'index.d.ts' file.

______________

Added route for products by department page.

Added route link in 'NavBar', 'ProductItem', and 'Show' components to the product by department page.

______________

Added department slug property to product listing resource and product resource.

Added a property type to the Product type for department slug in the 'index.d.ts' file.

______________

Added department param property to be included in PageProps when the current route name is 'product.byDepartment' in the 'HandleInertiaRequests.php' and 'index.d.ts' files.

Added active department indicator for the department page in the 'NavBar' component.

______________

Installed 'Pexels PHP' package to be able to fetch images from Pexels API through PHP easily.

Package link here: https://github.com/devscast/pexels

Installed specific version 1.1.4 instead of the latest version since that installed version 1.1.0 which does not work.

Added pexels key to ENV variables and app config file.

Added a property type for pexel image in the 'index.d.ts' file.

Pexel image is shown in the 'Profile' page of vendor profile.

______________

Added search bar on the navbar component.

Copied and pasted the when clause from the 'byDepartment' function to the 'home' function in the product controller and the 'profile' function in the vendor controller.

Added shared data for search keyword in the 'HandleInertiaRequests' file.

Added data type for keyword property in PageProps type in the 'index.d.ts' file.

----------------------------------------------------------------

Created new migrations file to add SEO columns to the 'products' table.

Added a section for SEO in the form of Filament Product resource.
There, vendor users can provide meta title and description for their product.

Added meta title and meta description to the Laravel product resource.

Copied the meta information contained within the <head> tag used in 'Index' page for Department page and pasted to the 'Show' component for product.

Added data type for meta title and meta description to the Product type in the 'index.d.ts' file.

______________

Previously, the product images are passed in the Product laravel resource file.
Afterwards, in the React component, if variation options are available, the images are switched to variation option images.
This switch-up causes bad SEO.

The solution is to properly pass the appropriate images from the backend side directly.

Get the options from the request if any in the Product laravel resource file.

______________

Added 'getImagesForOptions' method in the 'Product' model.

______________

Meta tags for SEO have been placed in the React pages of 'Show' [Product], 'Index' [Department], 'Profile' [Vendor], and 'Home'.

----------------------------------------------------------------

Added the 'getValue' property for the imperative handle hook to store the referenced dom value in the 'TextInput' component.

Used this 'getValue' property in the 'Register' page to access the original password input value.

Added data type in the 'index.d.ts' file for the returned object by text input ref within 'TextInput' component.

Added a real-time password confirmation validation.

----------------------------------------------------------------

Created a Laravel job for sending a queueable email verification.

Commented out the registered event in the registration controller and instead dispatch the email verification job (happens on user registration).

Do the same in the 'EmailVerificationNotificationController' by dispatching a job instead of sending the notification synchronously (happens on the re-send email verification link page).

______________

Added more password validation rules in the 'AppServiceProvider' file for production.

For development, the password validation rules are kept simple.

______________

Replaced 'send' method with 'queue' to queue the new order to the vendor and completed checkout to the buyer.

______________

Created a mailable class for vendor payout.

Created a page component for the vendor payout mail template.

Send payout email in queue in the PayoutVendors command.

______________

Added a mail markdown preview route.

Here is the code for a button to preview mail markdown:

    <Link href={route('test.mail.markdown')} className="p-3 rounded-md border-2 border-indigo-500" >View Markdown Mail</Link>

The route is currently set for the vendor payout mail markdown preview.

The route for this is commented out.

______________

Cancelled making password reset email to be queued.

The reason is to avoid queue delays.

A user likely expects a password reset email to be known directly.

Source: https://masteringlaravel.io/daily/2024-05-30-why-we-dont-queue-password-reset-emails

----------------------------------------------------------------

Added a config property for specifying the number of attempts and decay time for login attempts.

______________

Added eager loading for whichever controller method that uses the ProductListingResource.

______________

Added a direct return if the returned cart items are empty in the 'getCartItems()' method within cart service.

______________

Added a relationship for vendor in the 'Product' model.

Replaced 'user' property name with 'vendor' in the 'ProductListingResource' as well in the 'index.d.ts' file.

Exclude user name and only the user id and store name.

______________

There is a still duplicate query from the 'getFirstOptionsMap' function in the 'Product' model due to how the relation 'variationTypes' is used with the mapWithKeys helper function.

______________

Fixed duplicate queries from the  'getCartItems' method specifically when querying for products based on product IDs.

Added a bew relation for variation type option models to the media table.

Some Eloquent queries likely needs to be more optimized especially in 'getCartItems()' in 'CartService', 'home()' and 'show()' in 'ProductController', and helper functions 'Product' model.

----------------------------------------------------------------

'getCartItems()' method was called multiple times in the 'HandleInertiaRequests' file. 
The reason is that aside from this method being called to get the cart items, 
it was also being called by 'getTotalPrice()' and 'getTotalQuantity()' methods in that file.
Those two methods have been re-adujusted to instead receive the cart items that was obtained before.
And so, the 'getCartItems()' method is only called once. 

______________

Added timebox for authentication process.

----------------------------------------------------------------

Created a stat widget for stats overview of total unique customers, total vendor products, and pending orders.

Created chart widgets for showing the count of product created monthly in a current year, and status of vendor orders.

______________

Created a Filament resource for vendor orders.

Created a table widget for showing

______________

Fixed timebox placement in the store method of 'AuthenticatedSessionController'.

______________

Created a dashboard page to extend Filament's dashboard in the admin panel.

Created a custom account widget to modify Filament's account widget in the admin panel.

______________

Added a filter for the widget in the admin panel page for vendor users based on week, month, or year.

______________

Fixed the code logic of the chart widget that shows product created monthly.

______________

Created a bar chart showing the sales made from the vendor's products in the current week, month, or year.

______________

Added an if statement in the 'HandleInertiaRequests' file so that the code for the navigation bar in the e-commerce is not executed within filament panels.

______________

Added a local scope for the 'Order' model to filter the query to only include orders of a specific vendor.

______________

Added widgets to the 'ListOrders' resource page.

Added infolist through action on the table of 'ListOrders' resource page.

Ran the following command to add a custom theme for the panel:

    php artisan make:filament-theme

Afterwards, do the following steps:

  ⇂ First, add a new item to the `input` array of `vite.config.js`: `resources/css/filament/admin/theme.css`
  ⇂ Next, register the theme in the admin panel provider using `->viteTheme('resources/css/filament/admin/theme.css')`
  ⇂ Finally, run `npm run dev` to compile the theme in development

Used developer tool to identify the Tailwind CSS custom utility class that Filament use to style the sub-heading of a resource page.
Modified its font size using Tailwind CSS utility class.

______________

Created a view page for the Order Filament resource.

    php artisan make:filament-page ViewUser --resource=UserResource --type=ViewRecord

______________

Added an infolist in the OrderResource file that will automatically be used in the 'View' page for order resource.

______________

Created a blade view file in the directory 'resources/views/filament/infolists/entries/order-items.blade.php' for displaying order items belonging to an order.

______________

Added path to default Tailwind CSS styling to the vite config file and its vite theme to the admin panel provider.

Added dark mode setting to the tailwind config file.

______________

Added data type for cart items in the 'index.d.ts' file since the computed cart items is to be used in the cart controller to avoid duplication 
between the query in the index method there and the one in the 'HandleInertiaRequests' file.

______________

There is a currently an issue in Filament (as of version 3) where the query of the navigation badge is executed twice.

This issue seems to root from the Navigation Manager being called twice due to a PR by Dan Harrin.

The issue forum comes from this link: https://github.com/filamentphp/filament/issues/13388

----------------------------------------------------------------

Created 'simple' Filament resource for User model.

______________

Fixed non-existent value for 'subtotal' column in the Order list table using placeholder method on its column.

______________

Created a Laravel mailable class with markdown view called 'InitialPasswordSetup' in the case where the admin creates a new user.
An email is sent to the newly created user's email to let them set their own password.

______________

Created an invokable Action class for setting up the initial password email request to the newly created user by admin.

Created a notification for sending the initial password email.

Added a new route in the 'auth.php' file for viewing the initial password setting with the named alias 'password.initial'.

______________

When an admin user create an account for a specific user, an email will be sent to the user's email to let them set their password.

----------------------------------------------------------------

Created Filament resource for vendor users for admin.

______________

Modified the vendor request by a user to await approval from the admin through email.

______________

Created a mailable class for sending an email to the user that has been approved or rejected to become a vendor by the admin.

The mailable class is named 'VendorApplicationStatus'.

----------------------------------------------------------------

Adjusted the 'index' method in cart controller where stale orders (orders with draft status) are retrieved and removed from the database along with its corresponding order items.

Added a boot method in the 'Order' model to trigger an event for deleting the corresponding order items beforehand when an order model is to be deleted.

After order items deletion in the boot method, there is also expiration of checkout session for the order. 

Note:

    The default session expiration for Stripe Checkout Sessions is 24 hours from when they are created. 
    However, you can adjust this expiration time down to a minimum of 30 minutes if needed. 
    This adjustment is useful if you want to be notified of abandoned carts sooner. 
    When a Checkout Session reaches its expiration time without the buyer completing the checkout, it is considered abandoned. 
    At this point, the session is no longer accessible, and Stripe triggers the checkout.session.expired webhook event, 
    which you can use to try to recover the sale by inviting the customer to complete their purchase in a new session.

Alternatively, there is a provided method to recover abandoned cart checkout in the following link:

    https://docs.stripe.com/payments/checkout/abandoned-carts?lang=php

----------------------------------------------------------------

Added data type for checkout later for the cartItem type in the 'index.d.ts' file.

Added checkout later or now boolean condition in the CartItem component.

Adjusted getCartItems function in 'CartService' to retrieve the value of 'checkout_later'.

______________

Changed from calling the getCartItems function in the checkout() function of 'CartService' to using the Inertia shared data to avoid querying the same data again.

----------------------------------------------------------------

Created a mobile responsive navbar using an absolute positioned div for the mobile navigation menu.

Added a hamburger menu for mobile.

______________

Display cart dropdown on the navbar on mobile view.

Created accordion menu for product category.

______________

Added an if statement to check for a logged-in user when entering the cart checkout page to delete stale orders.

----------------------------------------------------------------

Added new type for variation option in the 'index.d.ts' file.

Added the variation option type for the variation option property in the Order type in the 'index.d.ts' file.

______________

Created an SVG icon for parcel icon.

Created a navigation to the Order page in the Navbar component.

Created a route to the index method of the OrderController.

Created a React page for displaying the user's orders.

______________

This is for the 'options' variable in the 'Index.tsx' file for displaying the user's orders.

Import Intl.DateTimeFormatOptions: 
    Make sure that the Intl namespace and its DateTimeFormatOptions interface are available in your TypeScript environment. 
    This is usually provided by the built-in TypeScript types or the @types/intl package. 
    You might not need an explicit import statement if your tsconfig.json is configured correctly (as discussed in the previous response).

-----

Additionally, taken from the MDN docs, it is stated that: 
    
    every time toLocaleString is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. 
    When the method is called many times with the same arguments, it is better to create a Intl.DateTimeFormat object and use its format() method, 
    because a DateTimeFormat object remembers the arguments passed to it and may decide to cache a slice of the database, 
    so future format calls can search for localization strings within a more constrained context.

______________

Eager loaded relationships in the 'success' method of 'StripeController.php' and 'getFirstImageUrl' method of 'Product.php' files.

______________

Created a model and migration for 'Delivery' of orders.

Created an enum file for order delivery status.

______________

Added an additional through a modal of providing address details before proceeding with the checkout.

Created a form request for customer address.

______________

Created a React component for order item.

Created a Laravel API resource for order delivery address.

______________

Created a Filament custom entry for delivery status on the vendor's order time page.

______________

Created a controller method for redirecting back to the Filament admin order show page.

----------------------------------------------------------------

Created a factory for Vendor model for testing purposes.

Fixed existing feature tests provided when creating a new Laravel 11 project with Breeze. 

----------------------------------------------------------------